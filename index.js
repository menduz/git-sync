"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const sa = require('superagent');
const path = require('path');
const fs = require('fs');
var yaml = require('js-yaml');
const cwd = process.cwd();
const glob = require('glob');
const gh = "https://api.github.com/repos/{repo}/contents/{file}";
const syncFiles = glob.sync("**/.git-sync", { cwd: cwd });
const operations = [];
console.log("Found config files: \n\t", syncFiles.join("\n\t"));
syncFiles.forEach(file => {
    var baseDir = path.dirname(file);
    var ast = yaml.safeLoad(fs.readFileSync(file, 'utf8'));
    ast.auth = ast.auth || {
        user: process.env.GIT_SYNC_USER,
        token: process.env.GIT_SYNC_TOKEN
    };
    ast.repository = ast.repository || process.env.GIT_SYNC_REPO;
    ast.pattern = ast.pattern || process.env.GIT_SYNC_PATTERN;
    const syncSubset = glob.sync(baseDir + '/' + (ast.pattern || "*"), { cwd: baseDir, nodir: true });
    syncSubset.forEach(file => operations.push(uploadFile(file, baseDir, ast)));
    console.log("\tFiles:\n\t\t", syncSubset.join("\n\t\t"));
});
function startOperations(operations) {
    return __awaiter(this, void 0, void 0, function* () {
        for (var i in operations) {
            yield operations[i]();
        }
    });
}
startOperations(operations)
    .catch(err => {
    console.log(err);
    console.dir(err);
});
function uploadFile(localFile, folder, ast) {
    //localFile = path.relative(localFile, folder)
    localFile = path.normalize(localFile);
    var url = gh.replace('{repo}', ast.repository);
    url = url.replace('{file}', localFile);
    return function () {
        return __awaiter(this, void 0, void 0, function* () {
            console.info(`Uploading ${localFile}`);
            let getResult = null;
            try {
                getResult = yield superagentToPromise(sa
                    .get(url)
                    .auth(ast.auth.user, ast.auth.token));
            }
            catch (e) {
                getResult = e;
            }
            const base64File = new Buffer(fs.readFileSync(path.resolve(folder, localFile))).toString('base64');
            let result = null;
            if (getResult.status == 200) {
                result = yield superagentToPromise(sa
                    .put(url)
                    .auth(ast.auth.user, ast.auth.token)
                    .send({
                    message: ast.message || 'Updated from git-sync script',
                    content: base64File,
                    branch: ast.branch || undefined,
                    sha: getResult.body.sha
                }));
            }
            else if (getResult.status == 404) {
                result = yield superagentToPromise(sa
                    .put(url)
                    .auth(ast.auth.user, ast.auth.token)
                    .send({
                    message: ast.message || 'Updated from git-sync script',
                    content: base64File,
                    branch: ast.branch || undefined
                }));
            }
            else {
                throw new Error("Unknown error Response:" + getResult.status || getResult.toString());
            }
            console.log("\tCommit: #" + result.body.commit.sha);
        });
    };
}
function superagentToPromise(sa) {
    let fulfill = null;
    let raise = null;
    const promise = new Promise((ok, err) => {
        fulfill = ok;
        raise = err;
    });
    sa.set('User-Agent', 'git-pusher/0.0.1');
    sa.end(function (err, res) {
        if (err)
            raise(err);
        else
            fulfill(res);
    });
    return promise;
}
//# sourceMappingURL=data:application/json;base64,